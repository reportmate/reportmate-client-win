name: Build and Release ReportMate

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
      - '[0-9][0-9][0-9][0-9].[0-9][0-9].[0-9][0-9]*'  # YYYY.MM.DD format
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g. 2024.06.27 or 1.0.0)'
        required: false
        default: ''
      create_release:
        description: 'Create GitHub release'
        type: boolean
        default: true
      create_tag:
        description: 'Create and push date-based tag (YYYY.MM.DD)'
        type: boolean
        default: false
  schedule:
    # Auto-build daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_PATH: 'src/ReportMate.WindowsClient.csproj'
  BUILD_CONFIGURATION: 'Release'
  RUNTIME_IDENTIFIER: 'win-x64'

jobs:
  build-and-package:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
      should_create_release: ${{ steps.release.outputs.SHOULD_CREATE_RELEASE }}
      tag_created: ${{ steps.tag.outputs.TAG_CREATED }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for tagging
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Determine version and release strategy
      id: version
      shell: pwsh
      run: |
        # Determine version
        if ($env:GITHUB_REF -match '^refs/tags/v(.+)$') {
          $version = $matches[1]
          $isTaggedRelease = $true
        } elseif ($env:GITHUB_REF -match '^refs/tags/(\d{4}\.\d{2}\.\d{2}.*)$') {
          $version = $matches[1]
          $isTaggedRelease = $true
        } elseif ("${{ github.event.inputs.version }}" -ne "") {
          $version = "${{ github.event.inputs.version }}"
          $isTaggedRelease = $false
        } elseif ($env:GITHUB_EVENT_NAME -eq "schedule") {
          # Daily build
          $version = Get-Date -Format "yyyy.MM.dd"
          $isTaggedRelease = $false
        } else {
          # PR or push to branch
          $version = "$(Get-Date -Format 'yyyy.MM.dd')-dev.$($env:GITHUB_RUN_NUMBER)"
          $isTaggedRelease = $false
        }
        
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        echo "IS_TAGGED_RELEASE=$isTaggedRelease" >> $env:GITHUB_OUTPUT
        echo "Building version: $version"
        echo "Is tagged release: $isTaggedRelease"
        
    - name: Create and push date-based tag
      id: tag
      if: github.event.inputs.create_tag == 'true' || (github.event_name == 'schedule' && github.ref == 'refs/heads/main')
      shell: pwsh
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        $dateTag = Get-Date -Format "yyyy.MM.dd"
        
        # Only create tag if it doesn't exist and version matches date format
        if ($version -match '^\d{4}\.\d{2}\.\d{2}$') {
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          $existingTag = git tag -l $dateTag
          if (-not $existingTag) {
            git tag $dateTag
            git push origin $dateTag
            echo "TAG_CREATED=$dateTag" >> $env:GITHUB_OUTPUT
            echo "Created and pushed tag: $dateTag"
          } else {
            echo "TAG_CREATED=existing" >> $env:GITHUB_OUTPUT
            echo "Tag $dateTag already exists"
          }
        } else {
          echo "TAG_CREATED=none" >> $env:GITHUB_OUTPUT
          echo "Version $version does not match date format, skipping tag creation"
        }
        
    - name: Determine release strategy
      id: release
      shell: pwsh
      run: |
        $shouldRelease = $false
        
        # Create release for:
        # 1. Tagged releases (v* or YYYY.MM.DD)
        # 2. Manual workflow dispatch with create_release=true
        # 3. Daily scheduled builds on main branch
        if ("${{ steps.version.outputs.IS_TAGGED_RELEASE }}" -eq "true") {
          $shouldRelease = $true
          echo "Release: Tagged release detected"
        } elseif ("${{ github.event.inputs.create_release }}" -eq "true") {
          $shouldRelease = $true
          echo "Release: Manual release requested"
        } elseif ($env:GITHUB_EVENT_NAME -eq "schedule" -and $env:GITHUB_REF -eq "refs/heads/main") {
          $shouldRelease = $true
          echo "Release: Daily scheduled build on main"
        } else {
          echo "Release: No release will be created"
        }
        
        echo "SHOULD_CREATE_RELEASE=$shouldRelease" >> $env:GITHUB_OUTPUT
        
    - name: Build with unified script
      shell: pwsh
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        echo "Building ReportMate version: $version"
        
        # Run the unified build script
        .\build.ps1 -Version $version -Configuration ${{ env.BUILD_CONFIGURATION }} -Clean
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: reportmate-${{ steps.version.outputs.VERSION }}
        path: |
          build/output/*.msi
          build/output/*.nupkg
          build/output/*.zip
          build/publish/runner.exe
        retention-days: 30
        
    - name: List build artifacts for verification
      shell: pwsh
      run: |
        echo "Final build artifacts:"
        Get-ChildItem "build/output" -Recurse | ForEach-Object { 
          $sizeKB = [math]::Round($_.Length / 1KB, 1)
          echo "  $($_.Name) ($sizeKB KB)" 
        }

  create-release:
    needs: build-and-package
    runs-on: ubuntu-latest
    if: needs.build-and-package.outputs.should_create_release == 'true'
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: reportmate-${{ needs.build-and-package.outputs.version }}
        path: ./artifacts
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.build-and-package.outputs.tag_created != 'none' && needs.build-and-package.outputs.tag_created != 'existing' && needs.build-and-package.outputs.tag_created || needs.build-and-package.outputs.version }}
        name: ReportMate ${{ needs.build-and-package.outputs.version }}
        files: |
          artifacts/*.msi
          artifacts/*.nupkg
          artifacts/*.zip
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(needs.build-and-package.outputs.version, 'dev') }}
        body: |
          ## ReportMate ${{ needs.build-and-package.outputs.version }}
          
          ### 📦 Package Types
          - **MSI Installer**: For enterprise deployment via Group Policy, SCCM, or Intune
          - **NUPKG Package**: For Chocolatey and Cimian package management
          - **ZIP Archive**: For manual installation and testing
          
          ### 🚀 Quick Start
          
          **MSI Installation:**
          ```cmd
          msiexec /i ReportMate-${{ needs.build-and-package.outputs.version }}.msi /quiet
          ```
          
          **Chocolatey Installation:**
          ```cmd
          choco install ReportMate-${{ needs.build-and-package.outputs.version }}.nupkg --source=.
          ```
          
          **Manual Installation:**
          1. Extract the ZIP file
          2. Run `install.bat` as administrator
          
          ### 🔧 Enterprise Configuration
          Configure via Registry (CSP/OMA-URI):
          - `HKLM\SOFTWARE\ReportMate\ApiUrl` - API endpoint URL
          - `HKLM\SOFTWARE\ReportMate\ClientPassphrase` - Access passphrase
          - `HKLM\SOFTWARE\ReportMate\CollectionInterval` - Data collection interval
          
          ### 📖 Documentation
          - [Installation Guide](https://github.com/${{ github.repository }}/blob/main/README.md)
          - [Enterprise Deployment](https://github.com/${{ github.repository }}/blob/main/README.md#enterprise-deployment)
          - [CSP/OMA-URI Configuration](https://github.com/${{ github.repository }}/blob/main/README.md#cspoma-uri-configuration)
          
          ---
          *Built from commit ${{ github.sha }}*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
  test-packages:
    needs: build-and-package
    runs-on: windows-latest
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: reportmate-${{ needs.build-and-package.outputs.version }}
        path: ./artifacts
        
    - name: Test MSI installation
      shell: pwsh
      run: |
        $msiFile = Get-ChildItem -Path "artifacts" -Filter "*.msi" | Select-Object -First 1
        if ($msiFile) {
          echo "Testing MSI installation: $($msiFile.Name)"
          
          # Install silently
          $process = Start-Process -FilePath "msiexec" -ArgumentList "/i", $msiFile.FullName, "/quiet", "/l*v", "install.log" -Wait -PassThru
          
          if ($process.ExitCode -eq 0) {
            echo "✅ MSI installation successful"
            
            # Verify installation
            if (Test-Path "C:\Program Files\ReportMate\runner.exe") {
              echo "✅ Executable found at expected location"
              
              # Test executable help
              try {
                $output = & "C:\Program Files\ReportMate\runner.exe" --help 2>&1
                echo "✅ Executable runs successfully"
                echo "Help output preview: $($output[0..2] -join '; ')"
              } catch {
                echo "⚠️  Executable help test failed: $_"
              }
            } else {
              echo "❌ Executable not found at expected location"
            }
            
            # Check configuration files
            if (Test-Path "C:\ProgramData\ManagedReports\appsettings.yaml") {
              echo "✅ Configuration files deployed correctly"
            } else {
              echo "❌ Configuration files not found"
            }
          } else {
            echo "❌ MSI installation failed with exit code: $($process.ExitCode)"
            if (Test-Path "install.log") {
              echo "Installation log:"
              Get-Content "install.log" -Tail 20
            }
          }
        } else {
          echo "❌ No MSI file found in artifacts"
        }
        
    - name: Test NUPKG package structure
      shell: pwsh
      run: |
        $nupkgFile = Get-ChildItem -Path "artifacts" -Filter "*.nupkg" | Select-Object -First 1
        if ($nupkgFile) {
          echo "Testing NUPKG package: $($nupkgFile.Name)"
          
          # Extract and examine structure
          $extractDir = "nupkg-test"
          New-Item -ItemType Directory -Path $extractDir -Force | Out-Null
          
          # NUPKG files are ZIP files
          Expand-Archive -Path $nupkgFile.FullName -DestinationPath $extractDir -Force
          
          echo "NUPKG contents:"
          Get-ChildItem $extractDir -Recurse | ForEach-Object {
            echo "  $($_.FullName.Substring($extractDir.Length + 1))"
          }
          
          # Check for required files
          $requiredFiles = @(
            "payload/Program Files/ReportMate/runner.exe",
            "payload/ProgramData/ManagedReports/appsettings.yaml",
            "payload/ProgramData/ManagedReports/queries.json"
          )
          
          foreach ($file in $requiredFiles) {
            if (Test-Path "$extractDir/$file") {
              echo "✅ Found required file: $file"
            } else {
              echo "❌ Missing required file: $file"
            }
          }
          
          echo "✅ NUPKG structure validation completed"
        } else {
          echo "❌ No NUPKG file found in artifacts"
        }
        
    - name: Test ZIP package
      shell: pwsh
      run: |
        $zipFile = Get-ChildItem -Path "artifacts" -Filter "*.zip" | Select-Object -First 1
        if ($zipFile) {
          echo "Testing ZIP package: $($zipFile.Name)"
          
          # Extract and examine structure
          $extractDir = "zip-test"
          New-Item -ItemType Directory -Path $extractDir -Force | Out-Null
          
          Expand-Archive -Path $zipFile.FullName -DestinationPath $extractDir -Force
          
          echo "ZIP contents:"
          Get-ChildItem $extractDir -Recurse | ForEach-Object {
            echo "  $($_.FullName.Substring($extractDir.Length + 1))"
          }
          
          # Check for install script
          if (Test-Path "$extractDir/install.bat") {
            echo "✅ Found installation script"
            echo "Install script preview:"
            Get-Content "$extractDir/install.bat" -Head 5 | ForEach-Object { echo "  $_" }
          } else {
            echo "❌ Installation script not found"
          }
          
          echo "✅ ZIP package validation completed"
        } else {
          echo "❌ No ZIP file found in artifacts"
        }
